{1.- Implementar un programa que invoque a los siguientes modulos.
a. Un modulo recursivo que retorne un vector de a lo sumo 15 numeros enteros random mayores a 10 y menores a 155 (incluidos ambos). La carga finaliza con 
el valor 20.
b. Un modulo no recursivo que reciba el vector generado en a) e imprima el contenido del vector.
c. Un modulo recursivo que reciba el vector generado en a) e imprima el contenido del vector.
d. Un modulo recursivo que reciba el vector generado en a) y devuelva la suma de los valores pares contenidos en el vector.
e. Un modulo recursivo que reciba el vector generado en a) y devuelva el maximo valor del vector.
f. Un modulo recursivo que reciba el vector generado en a) y un valor y devuelva verdadero si dicho valor se encuentra en el vector o falso en caso contrario.
g. Unmodulo que reciba el vector generado en a) e imprima, para cada numero contenido en el vector, sus digitos en el orden en que aparecen en el numero. 
Debe implementarse un modulo recursivo que reciba el numero e imprima lo pedido. Ejemplo si se lee el valor 142, se debe imprimir 1  4  2
}
program ejercicio1;
const
	dfvector = 15;
	corte = 20;

type
	rangovector = 1..dfvector;
	
	vector = array [rangovector] of integer;
	
	
procedure moduloincisoA(var v: vector; var dimlog: integer);
var
	aleatorio: integer;
begin
	aleatorio := random(146) + 10;
	if (aleatorio <> corte) and (dimlog < dfvector) then begin 
		dimlog := dimlog + 1;
		v[dimlog] := aleatorio;
		moduloincisoA(v, dimlog);	
	end;
end;
procedure moduloimprimeAnorecursivo(v: vector; dimlog: integer);
var
	i: rangovector;
begin
	for i := 1 to dimlog do 
		writeln('El numero en la posicion ', i , ' del vector, es: ', v[i]);
end;

procedure moduloimprimeArecursivo(v: vector; dimlog: integer);
begin
	if (dimlog > 0) then begin 
		moduloimprimeArecursivo(v, dimlog - 1);		
		writeln('El numero en la posicion', dimlog , 'del vector, es: ', v[dimlog]);
	end;
end;

function sumatotalD(v: vector; dimlog: integer): integer;
begin
	if (dimlog <> 0) then 
		if (v[dimlog] mod 2 = 0) then 
			sumatotalD := v[dimlog] + sumatotalD(v, dimlog -1)
		else
			sumatotalD := sumatotalD(v, dimlog - 1)
	else
		sumatotalD := 0;
end;

function buscomaximoE(v: vector; dimlog: integer): integer;
begin
	if (dimlog <> 0) then 
		if (dimlog = 1) then 
			buscomaximoE := v[dimlog]
		else begin 
			buscomaximoE := buscomaximoE(v, dimlog -1);
			if (v[dimlog] > buscomaximoE) then 
				buscomaximoE := v[dimlog];
		end;
end;

function  buscarvalorF(v: vector; dimlog, valor: integer): boolean;
begin 
	if (dimlog <> 0) then 
		if (v[dimlog] = valor) then 
			buscarvalorF := true
		else
			buscarvalorF := buscarvalorF(v, dimlog - 1, valor)
	else
		buscarvalorF := false;
end;

procedure desarmo(num: integer);
begin 
	if (num < 10) then 
		writeln(num)
	else begin
		desarmo(num div 10);
		writeln(num mod 10);
	end;
end;

procedure imprimodigitos(v: vector; dimlog: integer);
begin
	if (dimlog <> 0) then begin
		writeln('El número: ', v[dimlog], ' desarmado quedaría de la siguiente manera: ');
		desarmo(v[dimlog]);
		imprimodigitos(v, dimlog - 1);
	end;
end;

var
	v: vector;
	dimlog, suma, maximo, valor: integer;
	resultado: boolean;
begin
	Randomize;
	dimlog := 0;
	moduloincisoA(v, dimlog); // A
	if (dimlog = 0) then 
		writeln('El vector no tiene elementos.')
	else begin
		moduloimprimeAnorecursivo(v, dimlog); // B
		moduloimprimeArecursivo(v, dimlog); // C
		
		suma := sumatotalD(v, dimlog); // D
		writeln('La suma de los pares es: ', suma);
		
		maximo := buscomaximoE(v, dimlog); // E
		writeln('El valor máximo es: ', maximo);
		
		writeln('Ingrese un valor para buscarlo en el vector: ');
		readln(valor);
		resultado := buscarvalorF(v, dimlog, valor); // F
		writeln('El resultado de la búsqueda es: ', resultado);
		
		imprimodigitos(v, dimlog);
	end;
end.
