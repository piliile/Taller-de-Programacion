{2.- Escribir un programa que: 
a. Implemente un módulo recursivo que genere y retorne una lista de números enteros
“random” en el rango 100-200. Finalizar con el número 100.
b. Un módulo recursivo que reciba la lista generada en a) e imprima los valores de la lista en el
mismo orden que están almacenados.
c. Implemente un módulo recursivo que reciba la lista generada en a) e imprima los valores de
la lista en orden inverso al que están almacenados.
d. Implemente un módulo recursivo que reciba la lista generada en a) y devuelva el mínimo
valor de la lista.
e. Implemente un módulo recursivo que reciba la lista generada en a) y un valor y devuelva
verdadero si dicho valor se encuentra en la lista o falso en caso contrario.}

program ejercicio2;
const
	corte = 100;
type
	rango = 100..200;
	lista = ^nodo;
	nodo = record
		dato: rango;
		sig: lista;
	end;
	
procedure agregaradelante(var l: lista; a: rango);
var
	nue: lista;
begin
	new(nue);
	nue^.dato := a;
	nue^.sig := l;
	l := nue;
end;

procedure cargarlista(var l: lista); // var??? me confunde.
var
	aleatorio: rango;
begin
	aleatorio := random(101) + 100; 
	if (aleatorio <> corte) then begin 
		agregaradelante(l, aleatorio);
		writeln(l^.dato);
		cargarlista(l^.sig);
	end;
	
end;

procedure imprimirlistaB(l: lista);
begin
	if (l <> nil) then begin 
		writeln(l^.dato);
		imprimirlistaB(l^.sig);
	end;
end;

procedure imprimirlistaBordeninverso(l: lista);
begin
	if (l <> nil) then begin 
		imprimirlistaBordeninverso(l^.sig);
		writeln(l^.dato);
	end;
end;

function minimovalor(l: lista; min: integer): integer;
begin
	if (l <> nil) then begin  
		if (l^.dato < min) then 
			min := l^.dato;
		minimovalor := minimovalor(l^.sig, min);
	end
	else
	minimovalor := min; // hay que pensar en el caso base, este es cuando l = nil, como se llegó al final de la lista, no hay mas elementos a comparar, por lo tanto se envia el minimo obtenido
end;
function buscarvalor(l: lista; valor: integer): boolean;
begin
	if (l <> nil) then begin
		if (l^.dato = valor) then
			buscarvalor := true
		else
			buscarvalor := buscarvalor(l^.sig, valor);
	end
	else
		buscarvalor := false;
end;

//programa principal
var
	l: lista;
	min, valor: integer;
begin
	Randomize;
	l := nil;
	writeln('Los datos estan almacenados de la siguiente manera: ');
	cargarlista(l);
	
	writeln('Los datos en orden, son: ');
	imprimirlistaB(l);
	
	writeln('Los datos en orden inverso son: ');
	imprimirlistaBordeninverso(l);
	min := 9999;
	writeln('El minimo valor de la lista es: ', minimovalor(l, min));
	
	writeln('Ingrese un valor para determinar si está o no en la lista: ');
	readln(valor);
	writeln('El resultado de la busqueda del valor, es: ', buscarvalor(l, valor));
end.







