{Escribir un programa que:
a. Implementar un modulo que almacene informacion de socios de un club en un arbol binario de busqueda. 
De cada socio se debe almacenar numero de socio, nombre y edad. 
La carga finaliza con el numero de socio 0 y el arbol debe quedar ordenado por numero de socio. 
La informacion de cada socio debe generarse aleatoriamente.
b. Una vez generado el arbol, realice modulos independientes que reciban el arbol como parametro para: 
    i. Informar los datos de los socios en orden creciente.
    ii. Informar los datos de los socios en orden decreciente.
    iii. Informar el número de socio con mayor edad. Debe invocar a un módulo recursivo que retorne dicho valor.
    iv. Aumentar en 1 la edad de los socios con edad impar e informar la cantidad de socios que se les aumento 
    la edad.
    vi. Leer un nombre e informar si existe o no existe un socio con ese nombre. Debe invocar a un módulo recursivo 
    que reciba el nombre leído y retorne verdadero o falso.
    vii. Informar la cantidad de socios. Debe invocar a un módulo recursivo que retorne dicha cantidad.
    viii. Informar el promedio de edad de los socios. Debe invocar a un módulo recursivo que retorne 
    el promedio de las edades de los socios.}
program ejercicio1;
const
	corte = 0;

type
	socio = record 
		numero: integer;
		nombre: string;
		edad: integer;
	end;
	
	arbol = ^nodo;
	nodo = record
		dato: socio;
		HI: arbol;
		HD: arbol;
	end;
	
	
procedure cargarsocio(var s: socio);
var
	vNombres: array [0..9] of string = ('Pilar', 'Alejandra', 'Maria', 'Martin', 'Tomas', 'Lucia', 'Candela', 'Ines', 'Jazmin', 'Pedro'); 
begin 
	s.numero := random(100);
	writeln('El numero aleatorio es: ', s.numero);
	
	if (s.numero <> corte) then begin 
		s.nombre := vNombres[random(10)];
		writeln('El nombre del socio es: ', s.nombre);
		s.edad := random(100);
		writeln('La edad del socio es: ', s.edad);
	end;
end;

procedure agregar(var a: arbol; s: socio);
begin	
	if (a = nil) then begin 
		new(a);
		a^.dato := s;
		a^.HI := nil;
		a^.HD := nil;
	end
	else
		if (s.numero <= a^.dato.numero)	then 
			agregar(a^.HI, s)
		else
			agregar(a^.HD, s);
end;

procedure cargarArbol(var a: arbol);
var
	s: socio;
begin
	cargarsocio(s);
	while (s.numero <> corte) do begin 
		agregar(a, s);
		cargarsocio(s);
	end;
end;

procedure imprimoEnOrden(a: arbol);
begin
	if (a <> nil) then begin
		imprimoEnOrden(a^.HI);
		writeln('El numero de socio es: ', a^.dato.numero, ', el nombre: ', a^.dato.nombre, '. Y la edad es: ', a^.dato.edad);
		imprimoEnOrden(a^.HD);
	end;
end;

procedure imprimoEnOrden2(a: arbol);
begin
	if (a <> nil) then begin
		imprimoEnOrden2(a^.HD);
		writeln('El numero de socio es: ', a^.dato.numero, ', el nombre: ', a^.dato.nombre, '. Y la edad es: ', a^.dato.edad);
		imprimoEnOrden2(a^.HI);
	end;
end;


procedure buscarEdadMaxima(a: arbol; var edadmax: integer; var numeromax:integer); 
begin 
	if (a <> nil) then begin
		if (a^.dato.edad > edadmax) then  begin	
			edadmax := a^.dato.edad;
			numeromax := a^.dato.numero;
		end; 
		buscarEdadMaxima(a^.HI, edadmax, numeromax); 
		buscarEdadMaxima(a^.HD, edadmax, numeromax); 
	end;
end; 

procedure aumentoEn1Impares(a: arbol; var cantidadqueaumente: integer);
begin
	if (a <> nil) then begin 
		if (a^.dato.edad mod 2 = 1) then begin 
			a^.dato.edad := a^.dato.edad + 1;
			cantidadqueaumente := cantidadqueaumente + 1;
		end;
		aumentoEn1Impares(a^.HI, cantidadqueaumente);
		aumentoEn1Impares(a^.HD, cantidadqueaumente);
	end;
end;	
			
{function buscoNombre(a: arbol; name: string): boolean;     MEJOR QUE PROCEDURE buscoNombre (yo hacia bN:= con HI y despues bN := con HD, eso no se puede)
begin
	if (a <> nil) then begin 
		if (a^.dato.nombre = name) then 
			buscoNombre := true
		else 
			buscoNombre := buscoNombre(a^.HI, name) OR buscoNombre(a^.HD, name); 
	end
	else
		buscoNombre := false;
end;	}
				
procedure buscoNombre(a: arbol; name: string; var ok: boolean);
begin
	if (a = nil) then 
		ok := false
	else
		if (a^.dato.nombre = name) then 
			ok := true
		else begin
			buscoNombre(a^.HI, name, ok);
			if (not ok) then 	
				buscoNombre(a^.HD, name, ok);
		end;
end;

function cantidadtotalsocios(a: arbol): integer;
begin 
	if (a = nil) then
		cantidadtotalsocios := 0
	else 
		cantidadtotalsocios := 1 + cantidadtotalsocios(a^.HI) + cantidadtotalsocios(a^.HD);
end;	

function sumaEdadesSocios(a: arbol): integer;
begin 
	if (a = nil) then
		sumaEdadesSocios := 0
	else 
		sumaEdadesSocios := a^.dato.edad + sumaEdadesSocios(a^.HI) + sumaEdadesSocios(a^.HD);
end;	

function promedio(a: arbol): real;
begin 
	if (a = nil) then 
		promedio := 0
	else
		promedio := sumaEdadesSocios(a)/cantidadtotalsocios(a);
end;

// programa principal

var
	a: arbol;
	numeromaximo, edadmaxima, cantidadaumente: integer;
	nombre: string;
	ok: boolean;
begin 
	Randomize;
	a := nil;
	cargarArbol(a); // A
	writeln('El arbol impreso en orden creciente quedaría de la siguiente manera: ');
	imprimoEnOrden(a);
	writeln('El arbol impreso en orden decreciente quedaría de la siguiente manera: ');
	imprimoEnOrden2(a);

	edadmaxima := -1;
	numeromaximo := -1;
	writeln('El número de socio más grande es: ');
	buscarEdadMaxima(a, edadmaxima, numeromaximo);
	writeln('El socio más grande tiene: ', edadmaxima, ' años, y su numero es: ', numeromaximo);
	
	cantidadaumente := 0;
	aumentoEn1Impares(a, cantidadaumente);
	writeln('La cantidad de socios a los que se les tuvo que incrementar 1, son: ', cantidadaumente);
	
	writeln('Ingrese el nombre que se quiere buscar :');
	readln(nombre);
	ok := false;
	buscoNombre(a, nombre, ok);
	writeln('El resultado de la busqueda es: ', ok);
	
	writeln('La cantidad de socios es: ', cantidadtotalsocios(a));
	
	writeln('El promedio de edad de los socios es: ', promedio(a):0:2);
end.
