2. Escribir un programa que:
a. Implemente un módulo que genere aleatoriamente información de ventas de un comercio.
Para cada venta generar código de producto, fecha y cantidad de unidades vendidas. Finalizar
con el código de producto 0. Un producto puede estar en más de una venta. Se pide:
i. Generar y retornar un árbol binario de búsqueda de ventas ordenado por código de
producto. Los códigos repetidos van a la derecha.
ii. Generar y retornar otro árbol binario de búsqueda de productos vendidos ordenado por
código de producto. Cada nodo del árbol debe contener el código de producto y la
cantidad total de unidades vendidas.
iii. Generar y retornar otro árbol binario de búsqueda de productos vendidos ordenado por
código de producto. Cada nodo del árbol debe contener el código de producto y la lista de
las ventas realizadas del producto.
Nota: El módulo debe retornar TRES árboles.
b. Implemente un módulo que reciba el árbol generado en i. y una fecha y retorne la cantidad
total de productos vendidos en la fecha recibida.
c. Implemente un módulo que reciba el árbol generado en ii. y retorne el código de producto
con mayor cantidad total de unidades vendidas.
d. Implemente un módulo que reciba el árbol generado en iii. y retorne el código de producto
con mayor cantidad de ventas.}
program ejercicio2;
const
	corte = 0;
	
type
	venta = record
		codigoproducto: integer;
		fecha: integer;
		cantunivendidas: integer;
	end;
		
	arbol = ^nodo;
	nodo = record
		dato: venta;
		HI: arbol;
		HD: arbol;
	end;
	
	productosven = record
		codigoproducto: integer;
		cantunivendidas: integer;
	end;
	
	arbol2 = ^nodo2;
	nodo2 = record
		dato: productosven;
		HI: arbol2;
		HD: arbol2;
	end;

	listaVentas = ^nodoventas;
	nodoventas = record
		dato: venta;
		sig: listaVentas;
	end;
	
	codeylista = record
		codigoproducto: integer;
		lista: listaVentas;
	end;

	arbol3 = ^nodo3;
	nodo3 = record
		dato: codeylista;
		HI: arbol3;
		HD: arbol3;
	end;


// procedimientos/funciones:
	procedure generarInformacion(var v: venta);
	begin
		v.codigoproducto := random(99);
		if (v.codigoproducto <> corte) then begin	
			v.fecha := random(5) + 1;
			v.cantunivendidas := random(99);
		end;
	end;
	
	
	procedure agregarArbol(var a: arbol; v: venta);
	begin 
		if (a = nil) then begin
			new(a);
			a^.dato := v;
			a^.HI := nil;
			a^.HD := nil;
		end
		else 
			if (v.codigoproducto < a^.dato.codigoproducto) then // check: <=/<
				agregarArbol(a^.HI, v)
			else // si no es mayor, es menor o igual ("LOS CODIGOS REPETIDOS VAN A LA DERECHA")
				agregarArbol(a^.HD, v);
	end;		
				
	procedure agregarArbol2(var a2: arbol2; code, cantuniven: integer);
	begin 
		if (a2 = nil) then begin 
			new(a2);
			a2^.dato.codigoproducto := code;
			a2^.dato.cantunivendidas := cantuniven;
			a2^.HI := nil;
			a2^.HD := nil;
		end
		else begin
			if (code = a2^.dato.codigoproducto) then // PENSAR TODOS LOS CASOS. "UN PRODUCTO PUEDE ESTAR EN MAS DE UNA VENTA"
				a2^.dato.cantunivendidas:= a2^.dato.cantunivendidas + cantuniven
			else
				if (code < a2^.dato.codigoproducto) then 
					agregarArbol2(a2^.HI, code, cantuniven)
				else
					agregarArbol2(a2^.HD, code, cantuniven);
		end;
	end;
		
	procedure agregarAdelante(var l: listaVentas; v: venta);
	var
		nue: listaVentas;
	begin
		new(nue);
		nue^.dato := v;
		nue^.sig := l;
		l := nue;
	end;
			
	procedure agregarArbol3(var a3: arbol3; v: venta);
	begin 
		if (a3 = nil) then begin 
			new(a3);
			a3^.dato.codigoproducto := v.codigoproducto;
			a3^.dato.lista := nil;
			agregarAdelante(a3^.dato.lista, v);
			a3^.HI := nil;
			a3^.HD := nil;
		end
		else begin
			if (a3^.dato.codigoproducto = v.codigoproducto) then 
				agregarAdelante(a3^.dato.lista, v)
			else
				if (a3^.dato.codigoproducto > v.codigoproducto) then 
					agregarArbol3(a3^.HI, v)
				else
					agregarArbol3(a3^.HD, v);
		end;
	end;		
			
				
	procedure cargarArboles(var a: arbol; var a2: arbol2; var a3: arbol3);
	var
		v: venta;
	begin
		generarInformacion(v);
		while (v.codigoproducto <> corte) do begin 
			agregarArbol(a, v);
			agregarArbol2(a2, v.codigoproducto, v.cantunivendidas);
			agregarArbol3(a3, v); // LA LISTA ES DE VENTAS, X LO TANTO, SE LE PASA EL REGISTRO DE VENTAS, SOLO EL ARBOL Y SUS NODOS TIENEN OTRO REGISTRO.
			generarInformacion(v);
		end;
	end;
	
	function cantidadTotal(a: arbol; f: integer): integer;
	begin 
		if (a <> nil) then begin 
			if (a^.dato.fecha = f) then 
				cantidadTotal := a^.dato.cantunivendidas
			else
				if (a^.dato.fecha > f) then 
					cantidadTotal := cantidadTotal(a^.HI, f)
				else
					cantidadTotal := cantidadTotal(a^.HD, f);
		end;
	end;
 
	function productoMayorCodigo(a2: arbol2): integer;
		procedure buscoMaximo(a2: arbol2; var maximocodigo, maximacantidad: integer);
		begin
			if (a2 <> nil) then begin 
				if (a2^.dato.cantunivendidas > maximacantidad) then begin 
					maximacantidad := a2^.dato.cantunivendidas;
					maximocodigo := a2^.dato.codigoproducto;
				end;
				buscoMaximo(a2^.HI, maximocodigo, maximacantidad);
				buscoMaximo(a2^.HD, maximocodigo, maximacantidad);
			end;
		end;
	var
		maxcode, maxcant: integer;
	begin
		maxcode := -1;
		maxcant := -1;
		buscoMaximo(a2, maxcode, maxcant);
		productoMayorCodigo := maxcode;
	end;
	
	function productoMayorCantVentas(a3: arbol3): integer;
		function contarVentas(l: listaVentas): integer;
		var
			contador: integer;
		begin 
			contador := 0;
			while (l <> nil) do begin 
				contador := contador + 1;
				l := l^.sig;
			end;
			contarVentas := contador;
		end;
				
		procedure buscoMaximoCodigo(a3: arbol3; var maxcode, maxventas: integer);
		var
			totalVentas: integer;
		begin
			if (a3 <> nil) then begin 	
				totalVentas := contarVentas(a3^.dato.lista);
				if (totalVentas > maxventas) then begin 	
					maxcode := a3^.dato.codigoproducto;
					maxventas := totalVentas;
				end;
				buscoMaximoCodigo(a3^.HI, maxcode, maxventas);
				buscoMaximoCodigo(a3^.HD, maxcode, maxventas);
			end;
		end;
		
	var
		maxcode, maxventas: integer;
	begin
		maxcode := -1;
		maxventas := -1;
		buscoMaximoCodigo(a3, maxcode, maxventas);
		productoMayorCantVentas := maxcode;
	end;
				
		
	
// programa principal
var
	a: arbol;
	a2: arbol2;
	a3: arbol3;
	date: integer;
begin
	Randomize;
	a := nil; a2 := nil; a3 := nil;
	cargarArboles(a, a2, a3);
	
	writeln('Ingrese el numero de la fecha para saber la cantidad total de productos vendidos: ');
	readln(date);
	writeln('La cantidad total de productos vendidos en la fecha: ', date, 'es: ', cantidadTotal(a, date));
	
	writeln('El código de producto con mayor cantidad total de unidades vendidas es: ', productoMayorCodigo(a2));
	
	writeln('El código de producto con mayor cantidad de ventas es: ', productoMayorCantVentas(a3));
end.
