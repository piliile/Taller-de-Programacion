{Se lee informacion de las compras realizadas por los clientes a un supermercado en 2023.
De las compras se conoce el codigo de cliente, el numero de factura, el numero del mes y el monto total gastado.
La lectura finaliza cuando se lee el cliente con código 0.
A. realice un modulo que lea informacion de las compras y retorne un abb  ordenado por codigo de cliente. Para cada codigo de cliente, se debe
almacenar un vector con el monto total gastado por dicho cliente en cada mes del año.
B. realizar un modulo que reciba la estrctura generada en A y un codigo de cliente, y retorne el mes con mayor gasto de dicho cliente.
C. realizar un modulo que reciba la estructura generada en A y un mes, y retorne la cantidad de clientes que no gastaron nada en dicho mes.}

program parcialC;
const
	dfMes = 12;
	corte = 0;

type
	rangoMes = 1..dfMes;
	
	compra = record
		codigoCliente: integer;
		numeroFactura: integer;
		mes: rangoMes;
		montoTotal: real;
	end;
	
	vectorMontos = array [rangoMes] of real;
	
	datosArbol = record
		codigoCliente: integer;
		vector: vectorMontos;
	end;
	
	arbol = ^nodoArbol;
	nodoArbol = record
		dato: datosArbol;
		HI: arbol;
		HD: arbol;
	end;
	


// MODULOS

// INICIO INCISO A
	procedure leerCompra(var c: compra);
	begin	
		c.codigoCliente := random(50);
		writeln('El codigo de cliente generado es: ', c.codigoCliente);
		if (c.codigoCliente <> corte) then begin 
			c.numeroFactura := random(200) + 1;
			writeln('El numero de factura generado es: ', c.numeroFactura);
			c.mes := random(12) + 1;
			writeln('El mes generado es: ', c.mes);
			c.montoTotal := random(7000) + 500;
			writeln('El monto generado es: ', c.montoTotal:0:2);
			writeln;
		end;
	end;
	
	procedure inicializarVector(var v: vectorMontos);
	var
		i: rangoMes;
	begin
		for i := 1 to dfMes do 
			v[i] := 0;
	end;
	
	procedure cargarVector(var v: vectorMontos; mes: rangoMes; montoTotal: real);
	begin
		v[mes] := v[mes] + montoTotal;
	end;
	
	procedure agregarEnArbol(var a: arbol; c: compra);
	begin
		if (a = nil) then begin 
			new(a);
			a^.dato.codigoCliente := c.codigoCliente;
			inicializarVector(a^.dato.vector);
			cargarVector(a^.dato.vector, c.mes, c.montoTotal);
			a^.HI := nil; a^.HD := nil;
		end
		else begin
			if (a^.dato.codigoCliente = c.codigoCliente) then 
				cargarVector(a^.dato.vector, c.mes, c.montoTotal)
			else begin
				if (a^.dato.codigoCliente > c.codigoCliente) then 
					agregarEnArbol(a^.HI, c)
				else
					agregarEnArbol(a^.HD, c);
			end;
		end;
	end;
	
	
	procedure cargarArbol(var a: arbol);
	var
		c: compra;
	begin
		leerCompra(c);
		while (c.codigoCliente <> corte) do begin 
			agregarEnArbol(a, c);
			leerCompra(c);
		end;
	end;
	
	procedure imprimirArbol(a: arbol);
	
		procedure imprimirVector(v: vectorMontos);
		var
			i: rangoMes;
		begin	
			for i := 1 to dfMes do begin
				writeln('El mes ', i, ' tiene un monto de: ', v[i]:0:2);
				writeln;
			end;
		end;
		
	begin
		if (a <> nil) then begin 
			imprimirArbol(a^.HI);
			writeln('El codigo de cliente', a^.dato.codigoCliente, ' tiene el siguiente vector de montos: ');
			imprimirVector(a^.dato.vector);
			imprimirArbol(a^.HD);
		end;
	end;
// FIN INCISO A
	function retornoMesMasGasto(a: arbol; codCli: integer): integer;
		function buscoMesMaximo(v: vectorMontos): integer;
		var
			i: rangoMes;
			codigoMaximo: integer;
			cantidadMaxima: real;
		begin
			cantidadMaxima := -1 ; codigoMaximo := -1;
			for i := 1 to dfMes do begin 
				if (v[i] > cantidadMaxima) then begin
					cantidadMaxima := v[i];
					codigoMaximo := i;
				end;
			end;
			buscoMesMaximo := codigoMaximo;
		end;
	begin
		if (a <> nil) then begin 
			if (a^.dato.codigoCliente = codCli) then 
				retornoMesMasGasto := buscoMesMaximo(a^.dato.vector)
			else begin
				if (a^.dato.codigoCliente > codCli) then 
					retornoMesMasGasto := retornoMesMasGasto(a^.HI, codCli)
				else
					retornoMesMasGasto := retornoMesMasGasto(a^.HD, codCli);
			end;
		end;
	end;
// FIN INCISO B

// INICIO INCISO C
	function retornoCantidadC(a: arbol; mesleido: rangoMes): integer;
		function cumpleCondicion(v: vectorMontos; mesleido: rangoMes): boolean;
		begin
			cumpleCondicion := (v[mesleido] = 0);
		end;
	begin
		if (a <> nil) then begin 
			if (cumpleCondicion(a^.dato.vector, mesleido)) then 	
				retornoCantidadC := 1 + retornoCantidadC(a^.HI, mesleido) + retornoCantidadC(a^.HD, mesleido)
			else
				retornoCantidadC := retornoCantidadC(a^.HI, mesleido) + retornoCantidadC(a^.HD, mesleido);
		end
		else
			retornoCantidadC := 0;
	end;
	
// PROGRAMA PRINCIPAL
var
	a: arbol;
	mesMasGasto, codCli, cantClientesC: integer;
	mesleido: rangoMes;
begin
	Randomize;
	a := nil;
	cargarArbol(a);
	writeln('El arbol impreso quedaría de la siguiente manera: '); imprimirArbol(a); writeln;
	
	writeln('Ingrese un codigo de cliente: '); readln(codCli);
	mesMasGasto := retornoMesMasGasto(a, codCli);
	writeln('El mes con mas gastos fue: ', mesMasGasto); writeln;
	
	
	writeln('Ingrese un mes para ver cuantos clientes no gastaron nada en dicho mes: '); readln(mesleido);
	cantClientesC := retornoCantidadC(a, mesleido);
	writeln('La cantidad de clientes que no gastaron nada en el mes ', mesleido, ' son: ', cantClientesC, ' clientes.');
end.
